
RGB LED Cube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000181  00800100  00800100  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001278  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c63  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1a  00000000  00000000  00002497  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000032b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072c  00000000  00000000  00003b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004291  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 38       	cpi	r26, 0x81	; 129
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 57 00 	call	0xae	; 0xae <main>
  88:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
#include "Header files/Display.h"
#include "Header files/Multiplexing.h"

void setup(void)
{
	SPI_Init();
  90:	0e 94 44 01 	call	0x288	; 0x288 <SPI_Init>
	UART_Init(BAUDRATE250K);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 53 01 	call	0x2a6	; 0x2a6 <UART_Init>
	AnodesInit();
  9c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <AnodesInit>
	LED_DriversInit();
  a0:	0e 94 ac 00 	call	0x158	; 0x158 <LED_DriversInit>
	DDR_ADDITIONAL |= LED1 | LED2;
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	8c 60       	ori	r24, 0x0C	; 12
  a8:	87 b9       	out	0x07, r24	; 7
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
}

int main(void)
{
	setup();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	
	while(1)
	{
		TransmitCubeData(cubeData);		//display cubeData (data is received in UART interrupts)
  b2:	8d b7       	in	r24, 0x3d	; 61
  b4:	9e b7       	in	r25, 0x3e	; 62
  b6:	80 5c       	subi	r24, 0xC0	; 192
  b8:	91 09       	sbc	r25, r1
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	9e bf       	out	0x3e, r25	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	8d bf       	out	0x3d, r24	; 61
  c4:	ad b7       	in	r26, 0x3d	; 61
  c6:	be b7       	in	r27, 0x3e	; 62
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	80 ec       	ldi	r24, 0xC0	; 192
  cc:	e1 e0       	ldi	r30, 0x01	; 1
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x22>
  d8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TransmitCubeData>
  dc:	8d b7       	in	r24, 0x3d	; 61
  de:	9e b7       	in	r25, 0x3e	; 62
  e0:	80 54       	subi	r24, 0x40	; 64
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	9e bf       	out	0x3e, r25	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	8d bf       	out	0x3d, r24	; 61
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <main+0x4>

000000f0 <ClearAll>:

#include "../Header files/Display.h"


void ClearAll(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	c0 5c       	subi	r28, 0xC0	; 192
  fa:	d1 09       	sbc	r29, r1
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
	CubeData cubeData = {0};
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
 10a:	80 ec       	ldi	r24, 0xC0	; 192
 10c:	df 01       	movw	r26, r30
 10e:	1d 92       	st	X+, r1
 110:	8a 95       	dec	r24
 112:	e9 f7       	brne	.-6      	; 0x10e <ClearAll+0x1e>
	TransmitCubeData(cubeData);
 114:	8d b7       	in	r24, 0x3d	; 61
 116:	9e b7       	in	r25, 0x3e	; 62
 118:	80 5c       	subi	r24, 0xC0	; 192
 11a:	91 09       	sbc	r25, r1
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	9e bf       	out	0x3e, r25	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	8d bf       	out	0x3d, r24	; 61
 126:	ad b7       	in	r26, 0x3d	; 61
 128:	be b7       	in	r27, 0x3e	; 62
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <ClearAll+0x3e>
 136:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TransmitCubeData>
}
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	c0 54       	subi	r28, 0x40	; 64
 146:	df 4f       	sbci	r29, 0xFF	; 255
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <LED_DriversInit>:
#include "../Header files/LED_Drivers.h"


void LED_DriversInit(void)
{
	DDR_DRIVERS |= OE | LE;	//OE and LE as output
 158:	87 b1       	in	r24, 0x07	; 7
 15a:	80 63       	ori	r24, 0x30	; 48
 15c:	87 b9       	out	0x07, r24	; 7
	ClearAll();				//clear all drivers from dump from programming before operating
 15e:	0e 94 78 00 	call	0xf0	; 0xf0 <ClearAll>
 162:	08 95       	ret

00000164 <LED_DriversLatch>:
}

void LED_DriversLatch(void)
{
	PORT_DRIVERS |= LE;
 164:	45 9a       	sbi	0x08, 5	; 8
	PORT_DRIVERS &= ~LE;
 166:	45 98       	cbi	0x08, 5	; 8
 168:	08 95       	ret

0000016a <LED_DriversEnable>:
}

void LED_DriversEnable(void)
{
	PORT_DRIVERS &= ~OE;
 16a:	44 98       	cbi	0x08, 4	; 8
 16c:	08 95       	ret

0000016e <LED_DriversDisable>:
}

void LED_DriversDisable(void)
{
	PORT_DRIVERS |= OE;
 16e:	44 9a       	sbi	0x08, 4	; 8
 170:	08 95       	ret

00000172 <EnableLevel>:
	if (level > 7)
		return;
	else if (level >= 2)
		PORT_ANODES_H |= (1 << level);
	else
		PORT_ANODES_L |= (1 << level);
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	e8 f4       	brcc	.+58     	; 0x1b0 <EnableLevel+0x3e>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	70 f0       	brcs	.+28     	; 0x196 <EnableLevel+0x24>
 17a:	4b b1       	in	r20, 0x0b	; 11
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <EnableLevel+0x16>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <EnableLevel+0x12>
 18c:	cb 01       	movw	r24, r22
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	8b b9       	out	0x0b, r24	; 11
 194:	08 95       	ret
 196:	45 b1       	in	r20, 0x05	; 5
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <EnableLevel+0x32>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <EnableLevel+0x2e>
 1a8:	cb 01       	movw	r24, r22
 1aa:	80 95       	com	r24
 1ac:	84 23       	and	r24, r20
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	08 95       	ret

000001b2 <DisableAllLevels>:
}

void DisableAllLevels(void)
{
	PORT_ANODES_H |= A2 | A3 | A4 | A5 | A6 | A7;
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8c 6f       	ori	r24, 0xFC	; 252
 1b6:	8b b9       	out	0x0b, r24	; 11
	PORT_ANODES_L |= A0 | A1;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <AnodesInit>:
#include "../Header files/Multiplexing.h"

void AnodesInit(void)
{
	//anodes as outputs
	DDR_ANODES_H |= A2 | A3 | A4 | A5 | A6 | A7;
 1c0:	8a b1       	in	r24, 0x0a	; 10
 1c2:	8c 6f       	ori	r24, 0xFC	; 252
 1c4:	8a b9       	out	0x0a, r24	; 10
	DDR_ANODES_L |= A0 | A1;
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	83 60       	ori	r24, 0x03	; 3
 1ca:	84 b9       	out	0x04, r24	; 4
	//disabled by default
	DisableAllLevels();
 1cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DisableAllLevels>
 1d0:	08 95       	ret

000001d2 <TransmitCubeData>:
	PORT_ANODES_H |= A2 | A3 | A4 | A5 | A6 | A7;
	PORT_ANODES_L |= A0 | A1;
}

void TransmitCubeData(CubeData cubeData)
{
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	8e 01       	movw	r16, r28
 1ea:	04 5f       	subi	r16, 0xF4	; 244
 1ec:	1f 4f       	sbci	r17, 0xFF	; 255
 1ee:	b1 2c       	mov	r11, r1
 1f0:	38 c0       	rjmp	.+112    	; 0x262 <TransmitCubeData+0x90>
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
 1f2:	f7 01       	movw	r30, r14
 1f4:	81 91       	ld	r24, Z+
 1f6:	7f 01       	movw	r14, r30
 1f8:	0e 94 4e 01 	call	0x29c	; 0x29c <SPI_MasterTransmit>

void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
 1fc:	ec 14       	cp	r14, r12
 1fe:	fd 04       	cpc	r15, r13
 200:	c1 f7       	brne	.-16     	; 0x1f2 <TransmitCubeData+0x20>
 202:	78 01       	movw	r14, r16
 204:	f0 e4       	ldi	r31, 0x40	; 64
 206:	ef 0e       	add	r14, r31
 208:	f1 1c       	adc	r15, r1
 20a:	68 01       	movw	r12, r16
 20c:	88 e4       	ldi	r24, 0x48	; 72
 20e:	c8 0e       	add	r12, r24
 210:	d1 1c       	adc	r13, r1
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
 212:	f7 01       	movw	r30, r14
 214:	81 91       	ld	r24, Z+
 216:	7f 01       	movw	r14, r30
 218:	0e 94 4e 01 	call	0x29c	; 0x29c <SPI_MasterTransmit>
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
 21c:	ec 14       	cp	r14, r12
 21e:	fd 04       	cpc	r15, r13
 220:	c1 f7       	brne	.-16     	; 0x212 <TransmitCubeData+0x40>
 222:	78 01       	movw	r14, r16
 224:	f8 e0       	ldi	r31, 0x08	; 8
 226:	ef 0e       	add	r14, r31
 228:	f1 1c       	adc	r15, r1
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.red[8*i + j]);
 22a:	f8 01       	movw	r30, r16
 22c:	81 91       	ld	r24, Z+
 22e:	8f 01       	movw	r16, r30
 230:	0e 94 4e 01 	call	0x29c	; 0x29c <SPI_MasterTransmit>
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
 234:	0e 15       	cp	r16, r14
 236:	1f 05       	cpc	r17, r15
 238:	c1 f7       	brne	.-16     	; 0x22a <TransmitCubeData+0x58>
			SPI_MasterTransmit(cubeData.red[8*i + j]);
		
		DisableAllLevels();
 23a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DisableAllLevels>
		LED_DriversDisable();
 23e:	0e 94 b7 00 	call	0x16e	; 0x16e <LED_DriversDisable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	fd e0       	ldi	r31, 0x0D	; 13
 244:	fa 95       	dec	r31
 246:	f1 f7       	brne	.-4      	; 0x244 <TransmitCubeData+0x72>
 248:	00 00       	nop
		_delay_us(2);		//this delay eliminates "ghost" effect of LED below desired LED (probably caused by switch-off timing parameters of IO pins)
		LED_DriversLatch();
 24a:	0e 94 b2 00 	call	0x164	; 0x164 <LED_DriversLatch>
		EnableLevel(i);
 24e:	8b 2d       	mov	r24, r11
 250:	0e 94 b9 00 	call	0x172	; 0x172 <EnableLevel>
		LED_DriversEnable();
 254:	0e 94 b5 00 	call	0x16a	; 0x16a <LED_DriversEnable>
 258:	b3 94       	inc	r11
 25a:	87 01       	movw	r16, r14
	PORT_ANODES_L |= A0 | A1;
}

void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < 8; i++)
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	b8 16       	cp	r11, r24
 260:	49 f0       	breq	.+18     	; 0x274 <TransmitCubeData+0xa2>
 262:	78 01       	movw	r14, r16
 264:	e0 e8       	ldi	r30, 0x80	; 128
 266:	ee 0e       	add	r14, r30
 268:	f1 1c       	adc	r15, r1
 26a:	68 01       	movw	r12, r16
 26c:	f8 e8       	ldi	r31, 0x88	; 136
 26e:	cf 0e       	add	r12, r31
 270:	d1 1c       	adc	r13, r1
 272:	bf cf       	rjmp	.-130    	; 0x1f2 <TransmitCubeData+0x20>
		_delay_us(2);		//this delay eliminates "ghost" effect of LED below desired LED (probably caused by switch-off timing parameters of IO pins)
		LED_DriversLatch();
		EnableLevel(i);
		LED_DriversEnable();
	}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	bf 90       	pop	r11
 286:	08 95       	ret

00000288 <SPI_Init>:

#include "../Header files/SPI.h"

void SPI_Init(void)
{
	DDR_SPI |= SS | MOSI | SCK;			//SS, MOSI and SCK as output
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	8c 62       	ori	r24, 0x2C	; 44
 28c:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= ~MISO;					//MISO as input
 28e:	24 98       	cbi	0x04, 4	; 4
	
	SPCR |= (1 << SPE) | (1 << MSTR);	//enable SPI in master mode
 290:	8c b5       	in	r24, 0x2c	; 44
 292:	80 65       	ori	r24, 0x50	; 80
 294:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (SPI2X);					//double SPI speed to fosc/2
 296:	8d b5       	in	r24, 0x2d	; 45
 298:	8d bd       	out	0x2d, r24	; 45
 29a:	08 95       	ret

0000029c <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t cData)
{
	SPDR = cData;
 29c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//wait for transmission to be completed
 29e:	0d b4       	in	r0, 0x2d	; 45
 2a0:	07 fe       	sbrs	r0, 7
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <SPI_MasterTransmit+0x2>
 2a4:	08 95       	ret

000002a6 <UART_Init>:

uint8_t UART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 2a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2ae:	88 e9       	ldi	r24, 0x98	; 152
 2b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2b4:	8e e0       	ldi	r24, 0x0E	; 14
 2b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2ba:	08 95       	ret

000002bc <__vector_18>:

ISR(USART_RX_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	if (UART_iter < 64)
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2d4:	80 34       	cpi	r24, 0x40	; 64
 2d6:	70 f4       	brcc	.+28     	; 0x2f4 <__vector_18+0x38>
	{
		UART_cubeData.red[UART_iter] = UDR0;
 2d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2e2:	ef 53       	subi	r30, 0x3F	; 63
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 83       	st	Z, r24
		UART_iter++;
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2f2:	23 c0       	rjmp	.+70     	; 0x33a <__vector_18+0x7e>
	}
	else if (UART_iter < 128)
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2f8:	88 23       	and	r24, r24
 2fa:	74 f0       	brlt	.+28     	; 0x318 <__vector_18+0x5c>
	{
		UART_cubeData.green[UART_iter - 64] = UDR0;
 2fc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 306:	ef 53       	subi	r30, 0x3F	; 63
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 83       	st	Z, r24
		UART_iter++;
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 316:	11 c0       	rjmp	.+34     	; 0x33a <__vector_18+0x7e>
	}
	else if (UART_iter < 192)
 318:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 31c:	80 3c       	cpi	r24, 0xC0	; 192
 31e:	68 f4       	brcc	.+26     	; 0x33a <__vector_18+0x7e>
	{
		UART_cubeData.blue[UART_iter - 128] = UDR0;
 320:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 32a:	ef 53       	subi	r30, 0x3F	; 63
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	80 83       	st	Z, r24
		UART_iter++;
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	if (UART_iter >= 192)
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33e:	80 3c       	cpi	r24, 0xC0	; 192
 340:	90 f0       	brcs	.+36     	; 0x366 <__vector_18+0xaa>
	{
		UART_iter = 0;
 342:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		cubeData = UART_cubeData;				//assign UART_cubeData to cubeData which will be displayed in main loop
 346:	80 ec       	ldi	r24, 0xC0	; 192
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	a1 e0       	ldi	r26, 0x01	; 1
 34e:	b1 e0       	ldi	r27, 0x01	; 1
 350:	01 90       	ld	r0, Z+
 352:	0d 92       	st	X+, r0
 354:	8a 95       	dec	r24
 356:	e1 f7       	brne	.-8      	; 0x350 <__vector_18+0x94>
		UART_cubeData = (const CubeData) {0};	//reset UART_cubeData
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	80 ec       	ldi	r24, 0xC0	; 192
 35e:	df 01       	movw	r26, r30
 360:	1d 92       	st	X+, r1
 362:	8a 95       	dec	r24
 364:	e9 f7       	brne	.-6      	; 0x360 <__vector_18+0xa4>
	}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
