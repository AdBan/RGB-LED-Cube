
RGB LED Cube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de6  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091a  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a0  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  000025c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a4  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f1  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000032b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "Header files/Display.h"
#include "Header files/Multiplexing.h"

int main(void)
{
	LED_DriversInit();
  80:	0e 94 23 01 	call	0x246	; 0x246 <LED_DriversInit>
	SPI_Init();
  84:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_Init>
	AnodesInit();
  88:	0e 94 2c 01 	call	0x258	; 0x258 <AnodesInit>
	ClearAll(); //clear all drivers from dump from programming before operating
  8c:	0e 94 4d 00 	call	0x9a	; 0x9a <ClearAll>
	
	while(1)
	{
		RedAll();
  90:	0e 94 81 00 	call	0x102	; 0x102 <RedAll>
		GreenEdges();
  94:	0e 94 c2 00 	call	0x184	; 0x184 <GreenEdges>
  98:	fb cf       	rjmp	.-10     	; 0x90 <main+0x10>

0000009a <ClearAll>:
		else if (i < 8 || i > 56 || i % 8 == 0 || (i + 1) % 8 == 0)
			cubeData.red[i] = 0x81;
	}
	
	TransmitCubeData(cubeData);
}
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	c0 5c       	subi	r28, 0xC0	; 192
  a4:	d1 09       	sbc	r29, r1
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	fe 01       	movw	r30, r28
  b2:	31 96       	adiw	r30, 0x01	; 1
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	df 01       	movw	r26, r30
  b8:	1d 92       	st	X+, r1
  ba:	8a 95       	dec	r24
  bc:	e9 f7       	brne	.-6      	; 0xb8 <ClearAll+0x1e>
  be:	8d b7       	in	r24, 0x3d	; 61
  c0:	9e b7       	in	r25, 0x3e	; 62
  c2:	80 5c       	subi	r24, 0xC0	; 192
  c4:	91 09       	sbc	r25, r1
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	9e bf       	out	0x3e, r25	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	8d bf       	out	0x3d, r24	; 61
  d0:	ad b7       	in	r26, 0x3d	; 61
  d2:	be b7       	in	r27, 0x3e	; 62
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	80 ec       	ldi	r24, 0xC0	; 192
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <ClearAll+0x3e>
  e0:	0e 94 30 01 	call	0x260	; 0x260 <TransmitCubeData>
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	c0 54       	subi	r28, 0x40	; 64
  f0:	df 4f       	sbci	r29, 0xFF	; 255
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <RedAll>:
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	c0 5c       	subi	r28, 0xC0	; 192
 110:	d1 09       	sbc	r29, r1
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	8e 01       	movw	r16, r28
 11e:	0f 5f       	subi	r16, 0xFF	; 255
 120:	1f 4f       	sbci	r17, 0xFF	; 255
 122:	80 ec       	ldi	r24, 0xC0	; 192
 124:	f8 01       	movw	r30, r16
 126:	11 92       	st	Z+, r1
 128:	8a 95       	dec	r24
 12a:	e9 f7       	brne	.-6      	; 0x126 <RedAll+0x24>
 12c:	40 e4       	ldi	r20, 0x40	; 64
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	6f ef       	ldi	r22, 0xFF	; 255
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	c8 01       	movw	r24, r16
 136:	0e 94 ad 01 	call	0x35a	; 0x35a <memset>
 13a:	8d b7       	in	r24, 0x3d	; 61
 13c:	9e b7       	in	r25, 0x3e	; 62
 13e:	80 5c       	subi	r24, 0xC0	; 192
 140:	91 09       	sbc	r25, r1
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	9e bf       	out	0x3e, r25	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	8d bf       	out	0x3d, r24	; 61
 14c:	ad b7       	in	r26, 0x3d	; 61
 14e:	be b7       	in	r27, 0x3e	; 62
 150:	11 96       	adiw	r26, 0x01	; 1
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	f8 01       	movw	r30, r16
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	8a 95       	dec	r24
 15c:	e1 f7       	brne	.-8      	; 0x156 <RedAll+0x54>
 15e:	0e 94 30 01 	call	0x260	; 0x260 <TransmitCubeData>
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	c0 54       	subi	r28, 0x40	; 64
 16e:	df 4f       	sbci	r29, 0xFF	; 255
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <GreenEdges>:

void GreenEdges(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	c0 5c       	subi	r28, 0xC0	; 192
 18e:	d1 09       	sbc	r29, r1
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	CubeData cubeData = {0};
 19a:	fe 01       	movw	r30, r28
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	80 ec       	ldi	r24, 0xC0	; 192
 1a0:	df 01       	movw	r26, r30
 1a2:	1d 92       	st	X+, r1
 1a4:	8a 95       	dec	r24
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <GreenEdges+0x1e>
 1a8:	e0 5c       	subi	r30, 0xC0	; 192
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
	
	for (int i = 0; i < 64; i++)
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (i == 0 || i == 7 || i == 56 || i == 63)
			cubeData.green[i] = 0xFF;
 1b0:	7f ef       	ldi	r23, 0xFF	; 255
		else if (i < 8 || i > 56 || i % 8 == 0 || (i + 1) % 8 == 0)
			cubeData.green[i] = 0x81;
 1b2:	61 e8       	ldi	r22, 0x81	; 129
{
	CubeData cubeData = {0};
	
	for (int i = 0; i < 64; i++)
	{
		if (i == 0 || i == 7 || i == 56 || i == 63)
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	49 f0       	breq	.+18     	; 0x1ca <GreenEdges+0x46>
 1b8:	87 30       	cpi	r24, 0x07	; 7
 1ba:	91 05       	cpc	r25, r1
 1bc:	31 f0       	breq	.+12     	; 0x1ca <GreenEdges+0x46>
 1be:	88 33       	cpi	r24, 0x38	; 56
 1c0:	91 05       	cpc	r25, r1
 1c2:	19 f0       	breq	.+6      	; 0x1ca <GreenEdges+0x46>
 1c4:	8f 33       	cpi	r24, 0x3F	; 63
 1c6:	91 05       	cpc	r25, r1
 1c8:	11 f4       	brne	.+4      	; 0x1ce <GreenEdges+0x4a>
			cubeData.green[i] = 0xFF;
 1ca:	70 83       	st	Z, r23
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <GreenEdges+0x70>
		else if (i < 8 || i > 56 || i % 8 == 0 || (i + 1) % 8 == 0)
 1ce:	9c 01       	movw	r18, r24
 1d0:	ac 01       	movw	r20, r24
 1d2:	48 50       	subi	r20, 0x08	; 8
 1d4:	51 09       	sbc	r21, r1
 1d6:	41 33       	cpi	r20, 0x31	; 49
 1d8:	51 05       	cpc	r21, r1
 1da:	58 f4       	brcc	.+22     	; 0x1f2 <GreenEdges+0x6e>
 1dc:	ac 01       	movw	r20, r24
 1de:	47 70       	andi	r20, 0x07	; 7
 1e0:	55 27       	eor	r21, r21
 1e2:	45 2b       	or	r20, r21
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <GreenEdges+0x6e>
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	27 70       	andi	r18, 0x07	; 7
 1ec:	33 27       	eor	r19, r19
 1ee:	23 2b       	or	r18, r19
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <GreenEdges+0x70>
			cubeData.green[i] = 0x81;
 1f2:	60 83       	st	Z, r22

void GreenEdges(void)
{
	CubeData cubeData = {0};
	
	for (int i = 0; i < 64; i++)
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	31 96       	adiw	r30, 0x01	; 1
 1f8:	80 34       	cpi	r24, 0x40	; 64
 1fa:	91 05       	cpc	r25, r1
 1fc:	d9 f6       	brne	.-74     	; 0x1b4 <GreenEdges+0x30>
			cubeData.green[i] = 0xFF;
		else if (i < 8 || i > 56 || i % 8 == 0 || (i + 1) % 8 == 0)
			cubeData.green[i] = 0x81;
	}
	
	TransmitCubeData(cubeData);
 1fe:	8d b7       	in	r24, 0x3d	; 61
 200:	9e b7       	in	r25, 0x3e	; 62
 202:	80 5c       	subi	r24, 0xC0	; 192
 204:	91 09       	sbc	r25, r1
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	9e bf       	out	0x3e, r25	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	8d bf       	out	0x3d, r24	; 61
 210:	ad b7       	in	r26, 0x3d	; 61
 212:	be b7       	in	r27, 0x3e	; 62
 214:	11 96       	adiw	r26, 0x01	; 1
 216:	80 ec       	ldi	r24, 0xC0	; 192
 218:	fe 01       	movw	r30, r28
 21a:	31 96       	adiw	r30, 0x01	; 1
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <GreenEdges+0x98>
 224:	0e 94 30 01 	call	0x260	; 0x260 <TransmitCubeData>
}
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	c0 54       	subi	r28, 0x40	; 64
 234:	df 4f       	sbci	r29, 0xFF	; 255
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LED_DriversInit>:
#include "../Header files/LED_Drivers.h"


void LED_DriversInit(void)
{
	DDRC |= OE | LE;	//OE and LE as output
 246:	87 b1       	in	r24, 0x07	; 7
 248:	80 63       	ori	r24, 0x30	; 48
 24a:	87 b9       	out	0x07, r24	; 7
 24c:	08 95       	ret

0000024e <LED_DriversLatch>:
}

void LED_DriversLatch(void)
{
	PORTC |= LE;
 24e:	45 9a       	sbi	0x08, 5	; 8
 250:	08 95       	ret

00000252 <LED_DriversEnable>:
}

void LED_DriversEnable(void)
{
	PORTC &= ~LE;
 252:	45 98       	cbi	0x08, 5	; 8
	PORTC &= ~OE;
 254:	44 98       	cbi	0x08, 4	; 8
 256:	08 95       	ret

00000258 <AnodesInit>:

#include "../Header files/Multiplexing.h"

void AnodesInit(void)
{
	DDR_ANODES = 0xFF;	//all anodes as output
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	8a b9       	out	0x0a, r24	; 10
	PORT_ANODES = 0xFF; //disable all anodes
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	08 95       	ret

00000260 <TransmitCubeData>:
}


void TransmitCubeData(CubeData cubeData)
{
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	8e 01       	movw	r16, r28
 280:	00 5f       	subi	r16, 0xF0	; 240
 282:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < LEVELS_AMOUNT; i++)
 284:	c1 2c       	mov	r12, r1
 286:	d1 2c       	mov	r13, r1
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.red[8*i + j]);
		
		PORT_ANODES = 0xFF;
 288:	77 24       	eor	r7, r7
 28a:	7a 94       	dec	r7
		PORT_ANODES &= ~(1 << i);
 28c:	aa 24       	eor	r10, r10
 28e:	a3 94       	inc	r10
 290:	b1 2c       	mov	r11, r1
 292:	3d c0       	rjmp	.+122    	; 0x30e <TransmitCubeData+0xae>
void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < LEVELS_AMOUNT; i++)
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
 294:	f7 01       	movw	r30, r14
 296:	81 91       	ld	r24, Z+
 298:	7f 01       	movw	r14, r30
 29a:	0e 94 a8 01 	call	0x350	; 0x350 <SPI_MasterTransmit>

void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < LEVELS_AMOUNT; i++)
	{
		for (int j = 0; j < 8; j++)
 29e:	e8 14       	cp	r14, r8
 2a0:	f9 04       	cpc	r15, r9
 2a2:	c1 f7       	brne	.-16     	; 0x294 <TransmitCubeData+0x34>
 2a4:	78 01       	movw	r14, r16
 2a6:	f0 e4       	ldi	r31, 0x40	; 64
 2a8:	ef 0e       	add	r14, r31
 2aa:	f1 1c       	adc	r15, r1
 2ac:	48 01       	movw	r8, r16
 2ae:	88 e4       	ldi	r24, 0x48	; 72
 2b0:	88 0e       	add	r8, r24
 2b2:	91 1c       	adc	r9, r1
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
 2b4:	f7 01       	movw	r30, r14
 2b6:	81 91       	ld	r24, Z+
 2b8:	7f 01       	movw	r14, r30
 2ba:	0e 94 a8 01 	call	0x350	; 0x350 <SPI_MasterTransmit>
{
	for (int i = 0; i < LEVELS_AMOUNT; i++)
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
 2be:	e8 14       	cp	r14, r8
 2c0:	f9 04       	cpc	r15, r9
 2c2:	c1 f7       	brne	.-16     	; 0x2b4 <TransmitCubeData+0x54>
 2c4:	78 01       	movw	r14, r16
 2c6:	f8 e0       	ldi	r31, 0x08	; 8
 2c8:	ef 0e       	add	r14, r31
 2ca:	f1 1c       	adc	r15, r1
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.red[8*i + j]);
 2cc:	f8 01       	movw	r30, r16
 2ce:	81 91       	ld	r24, Z+
 2d0:	8f 01       	movw	r16, r30
 2d2:	0e 94 a8 01 	call	0x350	; 0x350 <SPI_MasterTransmit>
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
 2d6:	e0 16       	cp	r14, r16
 2d8:	f1 06       	cpc	r15, r17
 2da:	c1 f7       	brne	.-16     	; 0x2cc <TransmitCubeData+0x6c>
			SPI_MasterTransmit(cubeData.red[8*i + j]);
		
		PORT_ANODES = 0xFF;
 2dc:	7b b8       	out	0x0b, r7	; 11
		PORT_ANODES &= ~(1 << i);
 2de:	9b b1       	in	r25, 0x0b	; 11
 2e0:	95 01       	movw	r18, r10
 2e2:	0c 2c       	mov	r0, r12
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <TransmitCubeData+0x8a>
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <TransmitCubeData+0x86>
 2ee:	82 2f       	mov	r24, r18
 2f0:	80 95       	com	r24
 2f2:	89 23       	and	r24, r25
 2f4:	8b b9       	out	0x0b, r24	; 11
		LED_DriversLatch();
 2f6:	0e 94 27 01 	call	0x24e	; 0x24e <LED_DriversLatch>
		LED_DriversEnable();
 2fa:	0e 94 29 01 	call	0x252	; 0x252 <LED_DriversEnable>
}


void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < LEVELS_AMOUNT; i++)
 2fe:	ff ef       	ldi	r31, 0xFF	; 255
 300:	cf 1a       	sub	r12, r31
 302:	df 0a       	sbc	r13, r31
 304:	87 01       	movw	r16, r14
 306:	88 e0       	ldi	r24, 0x08	; 8
 308:	c8 16       	cp	r12, r24
 30a:	d1 04       	cpc	r13, r1
 30c:	49 f0       	breq	.+18     	; 0x320 <TransmitCubeData+0xc0>
 30e:	78 01       	movw	r14, r16
 310:	e0 e8       	ldi	r30, 0x80	; 128
 312:	ee 0e       	add	r14, r30
 314:	f1 1c       	adc	r15, r1
 316:	48 01       	movw	r8, r16
 318:	f8 e8       	ldi	r31, 0x88	; 136
 31a:	8f 0e       	add	r8, r31
 31c:	91 1c       	adc	r9, r1
 31e:	ba cf       	rjmp	.-140    	; 0x294 <TransmitCubeData+0x34>
		PORT_ANODES = 0xFF;
		PORT_ANODES &= ~(1 << i);
		LED_DriversLatch();
		LED_DriversEnable();
	}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	bf 90       	pop	r11
 332:	af 90       	pop	r10
 334:	9f 90       	pop	r9
 336:	8f 90       	pop	r8
 338:	7f 90       	pop	r7
 33a:	08 95       	ret

0000033c <SPI_Init>:

#include "../Header files/SPI.h"

void SPI_Init(void)
{
	DDRB |= SS | MOSI | SCK;	//SS, MOSI and SCK as output
 33c:	84 b1       	in	r24, 0x04	; 4
 33e:	8c 62       	ori	r24, 0x2C	; 44
 340:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~MISO;				//MISO as input
 342:	24 98       	cbi	0x04, 4	; 4
	
	SPCR |= (1 << SPE) | (1 << MSTR);	//enable SPI in master mode
 344:	8c b5       	in	r24, 0x2c	; 44
 346:	80 65       	ori	r24, 0x50	; 80
 348:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (SPI2X);					//double SPI speed to fosc/2
 34a:	8d b5       	in	r24, 0x2d	; 45
 34c:	8d bd       	out	0x2d, r24	; 45
 34e:	08 95       	ret

00000350 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t cData)
{
	SPDR = cData;
 350:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//wait for transmission to be completed
 352:	0d b4       	in	r0, 0x2d	; 45
 354:	07 fe       	sbrs	r0, 7
 356:	fd cf       	rjmp	.-6      	; 0x352 <SPI_MasterTransmit+0x2>
 358:	08 95       	ret

0000035a <memset>:
 35a:	dc 01       	movw	r26, r24
 35c:	01 c0       	rjmp	.+2      	; 0x360 <memset+0x6>
 35e:	6d 93       	st	X+, r22
 360:	41 50       	subi	r20, 0x01	; 1
 362:	50 40       	sbci	r21, 0x00	; 0
 364:	e0 f7       	brcc	.-8      	; 0x35e <memset+0x4>
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
