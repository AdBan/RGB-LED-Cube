
RGB LED Cube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000181  00800100  00800100  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cd  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c04  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da0  00000000  00000000  00002385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054e  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e7  00000000  00000000  0000398e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004075  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 38       	cpi	r26, 0x81	; 129
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 57 00 	call	0xae	; 0xae <main>
  88:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
#include "Header files/Display.h"
#include "Header files/Multiplexing.h"

void setup(void)
{
	SPI_Init();
  90:	0e 94 40 01 	call	0x280	; 0x280 <SPI_Init>
	UART_Init(BAUDRATE250K);
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 4f 01 	call	0x29e	; 0x29e <UART_Init>
	AnodesInit();
  9c:	0e 94 b7 00 	call	0x16e	; 0x16e <AnodesInit>
	LED_DriversInit();
  a0:	0e 94 ac 00 	call	0x158	; 0x158 <LED_DriversInit>
	DDR_ADDITIONAL |= LED1 | LED2;
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	8c 60       	ori	r24, 0x0C	; 12
  a8:	87 b9       	out	0x07, r24	; 7
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
}

int main(void)
{
	setup();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	
	while(1)
	{		
		TransmitCubeData(cubeData);
  b2:	8d b7       	in	r24, 0x3d	; 61
  b4:	9e b7       	in	r25, 0x3e	; 62
  b6:	80 5c       	subi	r24, 0xC0	; 192
  b8:	91 09       	sbc	r25, r1
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	9e bf       	out	0x3e, r25	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	8d bf       	out	0x3d, r24	; 61
  c4:	ad b7       	in	r26, 0x3d	; 61
  c6:	be b7       	in	r27, 0x3e	; 62
  c8:	11 96       	adiw	r26, 0x01	; 1
  ca:	80 ec       	ldi	r24, 0xC0	; 192
  cc:	e1 e0       	ldi	r30, 0x01	; 1
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x22>
  d8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <TransmitCubeData>
  dc:	8d b7       	in	r24, 0x3d	; 61
  de:	9e b7       	in	r25, 0x3e	; 62
  e0:	80 54       	subi	r24, 0x40	; 64
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	9e bf       	out	0x3e, r25	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	8d bf       	out	0x3d, r24	; 61
  ee:	e1 cf       	rjmp	.-62     	; 0xb2 <main+0x4>

000000f0 <ClearAll>:

#include "../Header files/Display.h"


void ClearAll(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	c0 5c       	subi	r28, 0xC0	; 192
  fa:	d1 09       	sbc	r29, r1
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
	CubeData cubeData = {0};
 106:	fe 01       	movw	r30, r28
 108:	31 96       	adiw	r30, 0x01	; 1
 10a:	80 ec       	ldi	r24, 0xC0	; 192
 10c:	df 01       	movw	r26, r30
 10e:	1d 92       	st	X+, r1
 110:	8a 95       	dec	r24
 112:	e9 f7       	brne	.-6      	; 0x10e <ClearAll+0x1e>
	TransmitCubeData(cubeData);
 114:	8d b7       	in	r24, 0x3d	; 61
 116:	9e b7       	in	r25, 0x3e	; 62
 118:	80 5c       	subi	r24, 0xC0	; 192
 11a:	91 09       	sbc	r25, r1
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	9e bf       	out	0x3e, r25	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	8d bf       	out	0x3d, r24	; 61
 126:	ad b7       	in	r26, 0x3d	; 61
 128:	be b7       	in	r27, 0x3e	; 62
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <ClearAll+0x3e>
 136:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <TransmitCubeData>
}
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	c0 54       	subi	r28, 0x40	; 64
 146:	df 4f       	sbci	r29, 0xFF	; 255
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <LED_DriversInit>:
#include "../Header files/LED_Drivers.h"


void LED_DriversInit(void)
{
	DDR_DRIVERS |= OE | LE;	//OE and LE as output
 158:	87 b1       	in	r24, 0x07	; 7
 15a:	80 63       	ori	r24, 0x30	; 48
 15c:	87 b9       	out	0x07, r24	; 7
	ClearAll();				//clear all drivers from dump from programming before operating
 15e:	0e 94 78 00 	call	0xf0	; 0xf0 <ClearAll>
 162:	08 95       	ret

00000164 <LED_DriversLatch>:
}

void LED_DriversLatch(void)
{
	PORT_DRIVERS |= LE;
 164:	45 9a       	sbi	0x08, 5	; 8
	PORT_DRIVERS &= ~LE;
 166:	45 98       	cbi	0x08, 5	; 8
 168:	08 95       	ret

0000016a <LED_DriversEnable>:
}


void LED_DriversEnable(void)
{
	PORT_DRIVERS &= ~OE;
 16a:	44 98       	cbi	0x08, 4	; 8
 16c:	08 95       	ret

0000016e <AnodesInit>:
	if (level > 7)
		return;
	else if (level >= 2)
		PORT_ANODES_H |= (1 << level);
	else
		PORT_ANODES_L |= (1 << level);
 16e:	8a b1       	in	r24, 0x0a	; 10
 170:	8c 6f       	ori	r24, 0xFC	; 252
 172:	8a b9       	out	0x0a, r24	; 10
 174:	84 b1       	in	r24, 0x04	; 4
 176:	83 60       	ori	r24, 0x03	; 3
 178:	84 b9       	out	0x04, r24	; 4
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8c 6f       	ori	r24, 0xFC	; 252
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	85 b1       	in	r24, 0x05	; 5
 182:	83 60       	ori	r24, 0x03	; 3
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <EnableLevel>:
 188:	88 30       	cpi	r24, 0x08	; 8
 18a:	e8 f4       	brcc	.+58     	; 0x1c6 <EnableLevel+0x3e>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	70 f0       	brcs	.+28     	; 0x1ac <EnableLevel+0x24>
 190:	4b b1       	in	r20, 0x0b	; 11
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <EnableLevel+0x16>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <EnableLevel+0x12>
 1a2:	cb 01       	movw	r24, r22
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	08 95       	ret
 1ac:	45 b1       	in	r20, 0x05	; 5
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <EnableLevel+0x32>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <EnableLevel+0x2e>
 1be:	cb 01       	movw	r24, r22
 1c0:	80 95       	com	r24
 1c2:	84 23       	and	r24, r20
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	08 95       	ret

000001c8 <DisableAllLevels>:
}

void DisableAllLevels(void)
{
	PORT_ANODES_H |= A2 | A3 | A4 | A5 | A6 | A7;
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8c 6f       	ori	r24, 0xFC	; 252
 1cc:	8b b9       	out	0x0b, r24	; 11
	PORT_ANODES_L |= A0 | A1;
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	83 60       	ori	r24, 0x03	; 3
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	08 95       	ret

000001d6 <TransmitCubeData>:
}

void TransmitCubeData(CubeData cubeData)
{
 1d6:	bf 92       	push	r11
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	8e 01       	movw	r16, r28
 1ee:	04 5f       	subi	r16, 0xF4	; 244
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	b1 2c       	mov	r11, r1
 1f4:	32 c0       	rjmp	.+100    	; 0x25a <TransmitCubeData+0x84>
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
 1f6:	f7 01       	movw	r30, r14
 1f8:	81 91       	ld	r24, Z+
 1fa:	7f 01       	movw	r14, r30
 1fc:	0e 94 4a 01 	call	0x294	; 0x294 <SPI_MasterTransmit>

void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
 200:	ec 14       	cp	r14, r12
 202:	fd 04       	cpc	r15, r13
 204:	c1 f7       	brne	.-16     	; 0x1f6 <TransmitCubeData+0x20>
 206:	78 01       	movw	r14, r16
 208:	f0 e4       	ldi	r31, 0x40	; 64
 20a:	ef 0e       	add	r14, r31
 20c:	f1 1c       	adc	r15, r1
 20e:	68 01       	movw	r12, r16
 210:	88 e4       	ldi	r24, 0x48	; 72
 212:	c8 0e       	add	r12, r24
 214:	d1 1c       	adc	r13, r1
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
 216:	f7 01       	movw	r30, r14
 218:	81 91       	ld	r24, Z+
 21a:	7f 01       	movw	r14, r30
 21c:	0e 94 4a 01 	call	0x294	; 0x294 <SPI_MasterTransmit>
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
 220:	ec 14       	cp	r14, r12
 222:	fd 04       	cpc	r15, r13
 224:	c1 f7       	brne	.-16     	; 0x216 <TransmitCubeData+0x40>
 226:	78 01       	movw	r14, r16
 228:	f8 e0       	ldi	r31, 0x08	; 8
 22a:	ef 0e       	add	r14, r31
 22c:	f1 1c       	adc	r15, r1
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.red[8*i + j]);
 22e:	f8 01       	movw	r30, r16
 230:	81 91       	ld	r24, Z+
 232:	8f 01       	movw	r16, r30
 234:	0e 94 4a 01 	call	0x294	; 0x294 <SPI_MasterTransmit>
	{
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.blue[8*i + j]);
		for (int j = 0; j < 8; j++)
			SPI_MasterTransmit(cubeData.green[8*i + j]);
		for (int j = 0; j < 8; j++)
 238:	0e 15       	cp	r16, r14
 23a:	1f 05       	cpc	r17, r15
 23c:	c1 f7       	brne	.-16     	; 0x22e <TransmitCubeData+0x58>
			SPI_MasterTransmit(cubeData.red[8*i + j]);
		
		DisableAllLevels();
 23e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DisableAllLevels>
		EnableLevel(i);
 242:	8b 2d       	mov	r24, r11
 244:	0e 94 c4 00 	call	0x188	; 0x188 <EnableLevel>
		LED_DriversLatch();
 248:	0e 94 b2 00 	call	0x164	; 0x164 <LED_DriversLatch>
		LED_DriversEnable();
 24c:	0e 94 b5 00 	call	0x16a	; 0x16a <LED_DriversEnable>
 250:	b3 94       	inc	r11
 252:	87 01       	movw	r16, r14
	PORT_ANODES_L |= A0 | A1;
}

void TransmitCubeData(CubeData cubeData)
{
	for (int i = 0; i < 8; i++)
 254:	f8 e0       	ldi	r31, 0x08	; 8
 256:	bf 16       	cp	r11, r31
 258:	49 f0       	breq	.+18     	; 0x26c <TransmitCubeData+0x96>
 25a:	78 01       	movw	r14, r16
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	e8 0e       	add	r14, r24
 260:	f1 1c       	adc	r15, r1
 262:	68 01       	movw	r12, r16
 264:	e8 e8       	ldi	r30, 0x88	; 136
 266:	ce 0e       	add	r12, r30
 268:	d1 1c       	adc	r13, r1
 26a:	c5 cf       	rjmp	.-118    	; 0x1f6 <TransmitCubeData+0x20>
		DisableAllLevels();
		EnableLevel(i);
		LED_DriversLatch();
		LED_DriversEnable();
	}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	bf 90       	pop	r11
 27e:	08 95       	ret

00000280 <SPI_Init>:

#include "../Header files/SPI.h"

void SPI_Init(void)
{
	DDR_SPI |= SS | MOSI | SCK;			//SS, MOSI and SCK as output
 280:	84 b1       	in	r24, 0x04	; 4
 282:	8c 62       	ori	r24, 0x2C	; 44
 284:	84 b9       	out	0x04, r24	; 4
	DDR_SPI &= ~MISO;					//MISO as input
 286:	24 98       	cbi	0x04, 4	; 4
	
	SPCR |= (1 << SPE) | (1 << MSTR);	//enable SPI in master mode
 288:	8c b5       	in	r24, 0x2c	; 44
 28a:	80 65       	ori	r24, 0x50	; 80
 28c:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (SPI2X);					//double SPI speed to fosc/2
 28e:	8d b5       	in	r24, 0x2d	; 45
 290:	8d bd       	out	0x2d, r24	; 45
 292:	08 95       	ret

00000294 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t cData)
{
	SPDR = cData;
 294:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//wait for transmission to be completed
 296:	0d b4       	in	r0, 0x2d	; 45
 298:	07 fe       	sbrs	r0, 7
 29a:	fd cf       	rjmp	.-6      	; 0x296 <SPI_MasterTransmit+0x2>
 29c:	08 95       	ret

0000029e <UART_Init>:

uint8_t UART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 29e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2a6:	88 e9       	ldi	r24, 0x98	; 152
 2a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2ac:	8e e0       	ldi	r24, 0x0E	; 14
 2ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2b2:	08 95       	ret

000002b4 <__vector_18>:

ISR(USART_RX_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	if (UART_iter < 64)
 2c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2cc:	80 34       	cpi	r24, 0x40	; 64
 2ce:	70 f4       	brcc	.+28     	; 0x2ec <__vector_18+0x38>
	{
		UART_cubeData.red[UART_iter] = UDR0;
 2d0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2da:	ef 53       	subi	r30, 0x3F	; 63
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 83       	st	Z, r24
		UART_iter++;
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2ea:	23 c0       	rjmp	.+70     	; 0x332 <__vector_18+0x7e>
	}
	else if (UART_iter < 128)
 2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2f0:	88 23       	and	r24, r24
 2f2:	74 f0       	brlt	.+28     	; 0x310 <__vector_18+0x5c>
	{
		UART_cubeData.green[UART_iter - 64] = UDR0;
 2f4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2fe:	ef 53       	subi	r30, 0x3F	; 63
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	80 83       	st	Z, r24
		UART_iter++;
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 30e:	11 c0       	rjmp	.+34     	; 0x332 <__vector_18+0x7e>
	}
	else if (UART_iter < 192)
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 314:	80 3c       	cpi	r24, 0xC0	; 192
 316:	68 f4       	brcc	.+26     	; 0x332 <__vector_18+0x7e>
	{
		UART_cubeData.blue[UART_iter - 128] = UDR0;
 318:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 322:	ef 53       	subi	r30, 0x3F	; 63
 324:	fe 4f       	sbci	r31, 0xFE	; 254
 326:	80 83       	st	Z, r24
		UART_iter++;
 328:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	if (UART_iter >= 192)
 332:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 336:	80 3c       	cpi	r24, 0xC0	; 192
 338:	90 f0       	brcs	.+36     	; 0x35e <__vector_18+0xaa>
	{
		UART_iter = 0;
 33a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		cubeData = UART_cubeData;				//assign UART_cubeData to cubeData which will be displayed in main loop
 33e:	80 ec       	ldi	r24, 0xC0	; 192
 340:	e1 ec       	ldi	r30, 0xC1	; 193
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	a1 e0       	ldi	r26, 0x01	; 1
 346:	b1 e0       	ldi	r27, 0x01	; 1
 348:	01 90       	ld	r0, Z+
 34a:	0d 92       	st	X+, r0
 34c:	8a 95       	dec	r24
 34e:	e1 f7       	brne	.-8      	; 0x348 <__vector_18+0x94>
		UART_cubeData = (const CubeData) {0};	//reset UART_cubeData
 350:	e1 ec       	ldi	r30, 0xC1	; 193
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	df 01       	movw	r26, r30
 358:	1d 92       	st	X+, r1
 35a:	8a 95       	dec	r24
 35c:	e9 f7       	brne	.-6      	; 0x358 <__vector_18+0xa4>
		//UART_iter = 0;
		//cubeData = UART_cubeData;				//assign UART_cubeData to cubeData which will be displayed in main loop
		//UART_cubeData = (const CubeData) {0};	//reset UART_cubeData
		//UART_Transmit(0x11);					//notify master that full cube has been transmitted
	//}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
